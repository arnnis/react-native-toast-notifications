{"version":3,"sources":["../src/toast.tsx","../src/utils/useDimensions.ts","../src/toast-container.tsx","../src/hook/context.ts","../src/hook/provider.tsx","../src/hook/useToast.ts","App.tsx","Home.tsx"],"names":["styles","StyleSheet","create","container","width","alignItems","toastContainer","paddingHorizontal","paddingVertical","borderRadius","marginVertical","flexDirection","overflow","message","color","fontWeight","iconContainer","marginRight","Toast","props","id","onDestroy","icon","type","duration","style","textStyle","animationDuration","animationType","successIcon","dangerIcon","warningIcon","successColor","dangerColor","warningColor","normalColor","placement","swipeEnabled","onPress","containerRef","useRef","useState","Animated","Value","animation","panResponderRef","panResponderAnimRef","closeTimeoutRef","dims","Dimensions","get","dimensions","setDimensions","onChange","window","useEffect","subscription","addEventListener","remove","removeEventListener","useDimensions","timing","toValue","useNativeDriver","Platform","OS","start","current","setTimeout","handleClose","clearTimeout","open","getPanResponderAnim","ValueXY","x","y","undefined","backgroundColor","animationStyle","opacity","transform","translateY","interpolate","inputRange","outputRange","push","getTranslateTransform","scale","View","ref","PanResponder","onMoveShouldSetPanResponder","_","gestureState","dx","dy","onPanResponderMove","setValue","onPanResponderRelease","panReleaseToRight","panReleaseToLeft","spring","panHandlers","renderType","renderToast","TouchableWithoutFeedback","disabled","maxWidth","React","isValidElement","Text","height","ToastContainer","show","toastOptions","Math","random","toString","onClose","setState","toasts","state","filter","t","requestAnimationFrame","onHide","hide","update","map","toast","hideAll","isOpen","some","this","offset","bottom","offsetBottom","justifyContent","KeyboardAvoidingView","behavior","pointerEvents","key","top","offsetTop","length","renderTopToasts","renderBottomToasts","renderCenterToasts","Component","defaultProps","flex","position","zIndex","elevation","alignSelf","ToastContext","createContext","ToastProvider","children","toastRef","refState","setRefState","Provider","value","useToast","useContext","App","name","size","custom_toast","borderLeftColor","borderLeftWidth","paddingLeft","fontSize","data","title","marginTop","with_close_button","marginLeft","marginBottom","test","Home","inputRef","global","focus","placeholder","console","log"],"mappings":"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","file":"static/js/app.ff994c9b.chunk.js","sourcesContent":["import React, { FC, useRef, useEffect, useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Animated,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Text,\n  TouchableWithoutFeedback,\n  PanResponder,\n  PanResponderInstance,\n  PanResponderGestureState,\n  Platform,\n} from \"react-native\";\nimport { useDimensions } from \"./utils/useDimensions\";\n\nexport interface ToastOptions {\n  /**\n   * Id is optional, you may provide an id only if you want to update toast later using toast.update()\n   */\n  id?: string;\n\n  /**\n   * Customize toast icon\n   */\n  icon?: JSX.Element;\n\n  /**\n   * Toast types, You can implement your custom types with JSX using renderType method on ToastContainer.\n   */\n  type?: \"normal\" | \"success\" | \"danger\" | \"warning\" | string;\n\n  /**\n   * In ms, How long toast will stay before it go away\n   */\n  duration?: number;\n\n  /**\n   * Customize when toast should be placed\n   */\n  placement?: \"top\" | \"bottom\" | \"center\";\n\n  /**\n   * Customize style of toast\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Customize style of toast text\n   */\n  textStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Customize how fast toast will show and hide\n   */\n  animationDuration?: number;\n\n  /**\n   * Customize how toast is animated when added or removed\n   */\n  animationType?: \"slide-in\" | \"zoom-in\";\n\n  /**\n   * Customize success type icon\n   */\n  successIcon?: JSX.Element;\n\n  /**\n   * Customize danger type icon\n   */\n  dangerIcon?: JSX.Element;\n\n  /**\n   * Customize warning type icon\n   */\n  warningIcon?: JSX.Element;\n\n  /**\n   * Customize success type color. changes toast background color\n   */\n  successColor?: string;\n\n  /**\n   * Customize danger type color. changes toast background color\n   */\n  dangerColor?: string;\n\n  /**\n   * Customize warning type color. changes toast background color\n   */\n  warningColor?: string;\n\n  /**\n   * Customize normal type color. changes toast background color\n   */\n  normalColor?: string;\n\n  /**\n   * Register event for when toast is pressed. If you're using a custom toast you have to pass this to a Touchable.\n   */\n  onPress?(id: string): void;\n\n  /**\n   * Execute event after toast is closed\n   */\n  onClose?(): void;\n\n  /**\n   * Payload data for custom toasts. You can pass whatever you want\n   */\n  data?: any;\n\n  swipeEnabled?: boolean;\n}\n\nexport interface ToastProps extends ToastOptions {\n  id: string;\n  onDestroy(): void;\n  message: string | JSX.Element;\n  open: boolean;\n  renderToast?(toast: ToastProps): JSX.Element;\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\n  onHide(): void;\n}\n\nconst Toast: FC<ToastProps> = (props) => {\n  let {\n    id,\n    onDestroy,\n    icon,\n    type = \"normal\",\n    message,\n    duration = 5000,\n    style,\n    textStyle,\n    animationDuration = 250,\n    animationType = \"slide-in\",\n    successIcon,\n    dangerIcon,\n    warningIcon,\n    successColor,\n    dangerColor,\n    warningColor,\n    normalColor,\n    placement,\n    swipeEnabled,\n    onPress,\n  } = props;\n\n  const containerRef = useRef<View>(null);\n  const [animation] = useState(new Animated.Value(0));\n  const panResponderRef = useRef<PanResponderInstance>();\n  const panResponderAnimRef = useRef<Animated.ValueXY>();\n  const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const dims = useDimensions();\n\n  useEffect(() => {\n    Animated.timing(animation, {\n      toValue: 1,\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: animationDuration,\n    }).start();\n    if (duration !== 0 && typeof duration === \"number\") {\n      closeTimeoutRef.current = setTimeout(() => {\n        handleClose();\n      }, duration);\n    }\n\n    return () => {\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n    };\n  }, [duration]);\n\n  // Handles hide & hideAll\n  useEffect(() => {\n    if (!props.open) {\n      // Unregister close timeout\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n\n      // Close animation them remove from stack.\n      handleClose();\n    }\n  }, [props.open]);\n\n  const handleClose = () => {\n    Animated.timing(animation, {\n      toValue: 0,\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: animationDuration,\n    }).start(() => onDestroy());\n  };\n\n  const panReleaseToLeft = (gestureState: PanResponderGestureState) => {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: { x: (-dims.width / 10) * 9, y: gestureState.dy },\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: 250,\n    }).start(() => onDestroy());\n  };\n\n  const panReleaseToRight = (gestureState: PanResponderGestureState) => {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: { x: (dims.width / 10) * 9, y: gestureState.dy },\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: 250,\n    }).start(() => onDestroy());\n  };\n\n  const getPanResponder = () => {\n    if (panResponderRef.current) return panResponderRef.current;\n    panResponderRef.current = PanResponder.create({\n      onMoveShouldSetPanResponder: (_, gestureState) => {\n        //return true if user is swiping, return false if it's a single click\n        return !(gestureState.dx === 0 && gestureState.dy === 0);\n      },\n      onPanResponderMove: (_, gestureState) => {\n        getPanResponderAnim()?.setValue({\n          x: gestureState.dx,\n          y: gestureState.dy,\n        });\n      },\n      onPanResponderRelease: (_, gestureState) => {\n        if (gestureState.dx > 50) {\n          panReleaseToRight(gestureState);\n        } else if (gestureState.dx < -50) {\n          panReleaseToLeft(gestureState);\n        } else {\n          Animated.spring(getPanResponderAnim(), {\n            toValue: { x: 0, y: 0 },\n            useNativeDriver: Platform.OS !== \"web\",\n          }).start();\n        }\n      },\n    });\n    return panResponderRef.current;\n  };\n\n  const getPanResponderAnim = () => {\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\n    panResponderAnimRef.current = new Animated.ValueXY({ x: 0, y: 0 });\n    return panResponderAnimRef.current;\n  };\n\n  if (icon === undefined) {\n    switch (type) {\n      case \"success\": {\n        if (successIcon) {\n          icon = successIcon;\n        }\n        break;\n      }\n\n      case \"danger\": {\n        if (dangerIcon) {\n          icon = dangerIcon;\n        }\n        break;\n      }\n      case \"warning\": {\n        if (warningIcon) {\n          icon = warningIcon;\n        }\n        break;\n      }\n    }\n  }\n\n  let backgroundColor = \"\";\n  switch (type) {\n    case \"success\":\n      backgroundColor = successColor || \"rgb(46, 125, 50)\";\n      break;\n    case \"danger\":\n      backgroundColor = dangerColor || \"rgb(211, 47, 47)\";\n      break;\n    case \"warning\":\n      backgroundColor = warningColor || \"rgb(237, 108, 2)\";\n      break;\n    default:\n      backgroundColor = normalColor || \"#333\";\n  }\n\n  const animationStyle: Animated.WithAnimatedObject<ViewStyle> = {\n    opacity: animation,\n    transform: [\n      {\n        translateY: animation.interpolate({\n          inputRange: [0, 1],\n          outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0], // 0 : 150, 0.5 : 75, 1 : 0\n        }),\n      },\n    ],\n  };\n\n  if (swipeEnabled) {\n    animationStyle.transform?.push(\n      getPanResponderAnim().getTranslateTransform()[0]\n    );\n  }\n\n  if (animationType === \"zoom-in\") {\n    animationStyle.transform?.push({\n      scale: animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0.7, 1],\n      }),\n    });\n  }\n\n  return (\n    <Animated.View\n      ref={containerRef}\n      {...(swipeEnabled ? getPanResponder().panHandlers : null)}\n      style={[styles.container, animationStyle]}\n    >\n      {props.renderType && props.renderType[type] ? (\n        props.renderType[type](props)\n      ) : props.renderToast ? (\n        props.renderToast(props)\n      ) : (\n        <TouchableWithoutFeedback\n          disabled={!onPress}\n          onPress={() => onPress && onPress(id)}\n        >\n          <View\n            style={[\n              styles.toastContainer,\n              { maxWidth: (dims.width / 10) * 9, backgroundColor },\n              style,\n            ]}\n          >\n            {icon ? <View style={styles.iconContainer}>{icon}</View> : null}\n            {React.isValidElement(message) ? (\n              message\n            ) : (\n              <Text style={[styles.message, textStyle]}>{message}</Text>\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      )}\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { width: \"100%\", alignItems: \"center\" },\n  toastContainer: {\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    borderRadius: 5,\n    marginVertical: 5,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n  },\n  message: {\n    color: \"#fff\",\n    fontWeight: \"500\",\n  },\n  iconContainer: {\n    marginRight: 5,\n  },\n});\n\nexport default Toast;\n","import { useEffect, useState } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nexport function useDimensions() {\n  const [dimensions, setDimensions] = useState(Dimensions.get(\"window\"));\n\n  const onChange = ({ window }: { window: ScaledSize }) => {\n    setDimensions(window);\n  };\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener(\"change\", onChange);\n\n    return () => {\n      // @ts-expect-error - React Native >= 0.65\n      if (typeof subscription?.remove === \"function\") {\n        // @ts-expect-error\n        subscription.remove();\n      } else {\n        // React Native < 0.65\n        Dimensions.removeEventListener(\"change\", onChange);\n      }\n    };\n  }, []);\n\n  return dimensions;\n}\n","import React, { Component } from \"react\";\nimport {\n  StyleSheet,\n  ViewStyle,\n  KeyboardAvoidingView,\n  Platform,\n  Dimensions,\n} from \"react-native\";\nimport Toast, { ToastOptions, ToastProps } from \"./toast\";\n\nconst { height, width } = Dimensions.get(\"window\");\n\nexport interface Props extends ToastOptions {\n  renderToast?(toast: ToastProps): JSX.Element;\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\n  offset?: number;\n  offsetTop?: number;\n  offsetBottom?: number;\n  swipeEnabled?: boolean;\n}\n\ninterface State {\n  toasts: Array<ToastProps>;\n}\n\nclass ToastContainer extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      toasts: [],\n    };\n  }\n\n  static defaultProps: Props = {\n    placement: \"bottom\",\n    offset: 10,\n    swipeEnabled: true,\n  };\n\n  /**\n   * Shows a new toast. Returns id\n   */\n  show = (message: string | JSX.Element, toastOptions?: ToastOptions) => {\n    let id = toastOptions?.id || Math.random().toString();\n    const onDestroy = () => {\n      toastOptions?.onClose && toastOptions?.onClose();\n      this.setState({ toasts: this.state.toasts.filter((t) => t.id !== id) });\n    };\n\n    requestAnimationFrame(() => {\n      this.setState({\n        toasts: [\n          {\n            id,\n            onDestroy,\n            message,\n            open: true,\n            onHide: () => this.hide(id),\n            ...this.props,\n            ...toastOptions,\n          },\n          ...this.state.toasts.filter((t) => t.open),\n        ],\n      });\n    });\n\n    return id;\n  };\n\n  /**\n   * Updates a toast, To use this create you must pass an id to show method first, then pass it here to update the toast.\n   */\n  update = (\n    id: string,\n    message: string | JSX.Element,\n    toastOptions?: ToastOptions\n  ) => {\n    this.setState({\n      toasts: this.state.toasts.map((toast) =>\n        toast.id === id ? { ...toast, message, ...toastOptions } : toast\n      ),\n    });\n  };\n\n  /**\n   * Removes a toast from stack\n   */\n  hide = (id: string) => {\n    this.setState({\n      toasts: this.state.toasts.map((t) =>\n        t.id === id ? { ...t, open: false } : t\n      ),\n    });\n  };\n\n  /**\n   * Removes all toasts in stack\n   */\n  hideAll = () => {\n    this.setState({\n      toasts: this.state.toasts.map((t) => ({ ...t, open: false })),\n    });\n  };\n\n  /**\n   * Check if a toast is currently open\n   */\n  isOpen = (id: string) => {\n    return this.state.toasts.some((t) => t.id === id && t.open);\n  }\n\n  renderBottomToasts() {\n    const { toasts } = this.state;\n    let { offset, offsetBottom } = this.props;\n    let style: ViewStyle = {\n      bottom: offsetBottom || offset,\n      justifyContent: \"flex-end\",\n      flexDirection: \"column\",\n    };\n    return (\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"position\" : undefined}\n        style={[styles.container, style]}\n        pointerEvents=\"box-none\"\n      >\n        {toasts\n          .filter((t) => !t.placement || t.placement === \"bottom\")\n          .map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n      </KeyboardAvoidingView>\n    );\n  }\n\n  renderTopToasts() {\n    const { toasts } = this.state;\n    let { offset, offsetTop } = this.props;\n    let style: ViewStyle = {\n      top: offsetTop || offset,\n      justifyContent: \"flex-start\",\n      flexDirection: \"column-reverse\",\n    };\n    return (\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"position\" : undefined}\n        style={[styles.container, style]}\n        pointerEvents=\"box-none\"\n      >\n        {toasts\n          .filter((t) => t.placement === \"top\")\n          .map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n      </KeyboardAvoidingView>\n    );\n  }\n\n  renderCenterToasts() {\n    const { toasts } = this.state;\n    let { offset, offsetTop } = this.props;\n    let style: ViewStyle = {\n      top: offsetTop || offset,\n      height: height,\n      width: width,\n      justifyContent: \"center\",\n      flexDirection: \"column-reverse\",\n    };\n\n    const data = toasts.filter((t) => t.placement === \"center\");\n    const foundToast = data.length > 0;\n\n    if (!foundToast) return null;\n\n    return (\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"position\" : undefined}\n        style={[styles.container, style]}\n        pointerEvents=\"box-none\"\n      >\n        {toasts\n          .filter((t) => t.placement === \"center\")\n          .map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n      </KeyboardAvoidingView>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderTopToasts()}\n        {this.renderBottomToasts()}\n        {this.renderCenterToasts()}\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 0,\n    position: \"absolute\",\n    maxWidth: \"100%\",\n    zIndex: 999999,\n    elevation: 999999,\n    alignSelf: 'center',\n    ...(Platform.OS === \"web\" ? { overflow: \"hidden\" } : null),\n  },\n  message: {\n    color: \"#333\",\n  },\n});\n\nexport default ToastContainer;\n","import React from \"react\";\nimport ToastContainer from \"../toast-container\";\n\nexport type ToastType = Pick<\n  ToastContainer,\n  \"show\" | \"update\" | \"hide\" | \"hideAll\"\n>;\n\nconst ToastContext = React.createContext({} as ToastType);\n\nexport default ToastContext;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport ToastContext from \"./context\";\nimport Toast, { Props } from \"../toast-container\";\n\nconst ToastProvider: FC<Props> = ({ children, ...props }) => {\n  const toastRef = useRef(null);\n  const [refState, setRefState] = useState({});\n\n  useEffect(() => {\n    setRefState(toastRef.current as any);\n  }, []);\n\n  return (\n    <ToastContext.Provider value={refState as any}>\n      {children}\n      <Toast ref={toastRef} {...props} />\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider;\n","import { useContext } from \"react\";\nimport ToastContext, { ToastType } from \"./context\";\n\nconst useToast = (): ToastType => useContext(ToastContext);\n\nexport default useToast;\n","import React from \"react\";\nimport { StyleSheet, View, Text, TouchableOpacity } from \"react-native\";\nimport { ToastProvider } from \"react-native-toast-notifications\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport Home from \"./Home\";\n\nexport default function App() {\n  return (\n    <ToastProvider\n      placement=\"bottom\"\n      dangerIcon={<MaterialCommunityIcons name=\"close\" color=\"#fff\" />}\n      successIcon={<MaterialCommunityIcons name=\"check\" color=\"#fff\" size={18} />}\n      offset={10}\n      // Custom type example\n      renderType={{\n        custom_toast: (toast) => (\n          <View\n            style={{\n              maxWidth: \"85%\",\n              paddingHorizontal: 15,\n              paddingVertical: 10,\n              backgroundColor: \"#fff\",\n              marginVertical: 4,\n              borderRadius: 8,\n              borderLeftColor: \"#00C851\",\n              borderLeftWidth: 6,\n              justifyContent: \"center\",\n              paddingLeft: 16,\n            }}\n          >\n            <Text\n              style={{\n                fontSize: 14,\n                color: \"#333\",\n                fontWeight: \"bold\",\n              }}\n            >\n              {toast.data.title}\n            </Text>\n            <Text style={{ color: \"#a3a3a3\", marginTop: 2 }}>{toast.message}</Text>\n          </View>\n        ),\n        with_close_button: (toast) => (\n          <View\n            style={{\n              maxWidth: \"85%\",\n              paddingVertical: 10,\n              backgroundColor: \"#fff\",\n              marginVertical: 4,\n              borderRadius: 8,\n              borderLeftColor: \"#00C851\",\n              borderLeftWidth: 6,\n              justifyContent: \"center\",\n              paddingHorizontal: 16,\n              flexDirection: \"row\",\n            }}\n          >\n            <Text style={{ color: \"#a3a3a3\", marginRight: 16 }}>{toast.message}</Text>\n            <TouchableOpacity\n              onPress={() => toast.onHide()}\n              style={{\n                marginLeft: \"auto\",\n                width: 25,\n                height: 25,\n                borderRadius: 5,\n                backgroundColor: \"#333\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Text style={{ color: \"#fff\", fontWeight: \"500\", marginBottom: 2.5 }}>\n                x\n              </Text>\n            </TouchableOpacity>\n          </View>\n        ),\n      }}\n    >\n      <Home />\n    </ToastProvider>\n  );\n}\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  test: {\n    fontSize: 16,\n    marginTop: 10,\n  },\n});\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useRef, useEffect } from \"react\";\nimport { StyleSheet, Text, View, TextInput } from \"react-native\";\n\nimport { ToastProvider, useToast } from \"react-native-toast-notifications\";\n\nconst Home = () => {\n  const toast = useToast();\n  const inputRef = useRef<TextInput>(null);\n\n  useEffect(() => {\n    global[\"toast\"] = toast;\n  }, []);\n\n  return (\n    <ToastProvider placement=\"bottom\">\n      <View style={styles.container}>\n        <StatusBar style=\"auto\" />\n        <Text\n          onPress={() => toast.show(\"This is a toast!\", { duration: 10000 })}\n          style={styles.test}\n        >\n          Normal\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a success toast!\", {\n              type: \"success\",\n            })\n          }\n          style={styles.test}\n        >\n          Success\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a danger toast!\", {\n              type: \"danger\",\n            })\n          }\n          style={styles.test}\n        >\n          Danger\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a warning toast!\", {\n              type: \"warning\",\n            })\n          }\n          style={styles.test}\n        >\n          Warning\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\n              \"This is a customized toast! you can implement your own\",\n              {\n                type: \"custom_toast\",\n                animationDuration: 100,\n                data: {\n                  title: \"Customized toast\",\n                },\n              }\n            )\n          }\n          style={styles.test}\n        >\n          Custom type\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a customized toast with close button!\", {\n              type: \"with_close_button\",\n              animationDuration: 100,\n            })\n          }\n          style={styles.test}\n        >\n          Custom type 2\n        </Text>\n        <Text\n          onPress={() => {\n            toast.show(\"This toast should render on top\", {\n              placement: \"top\",\n            });\n          }}\n          style={[styles.test, { marginTop: 30 }]}\n        >\n          Placement top\n        </Text>\n        <Text\n          onPress={() => {\n            toast.show(\"This toast should render on center\", {\n              placement: \"center\",\n            });\n          }}\n          style={[styles.test]}\n        >\n          Placement center\n        </Text>\n        <Text\n          onPress={() => {\n            toast?.show(\"This toast have zoom-in animation\", {\n              placement: \"bottom\",\n              animationType: \"zoom-in\",\n            });\n          }}\n          style={[styles.test]}\n        >\n          Zoom in animation type\n        </Text>\n        <Text\n          onPress={() => {\n            let id = toast.show(\"This toast will update\", {});\n            setTimeout(() => {\n              if (id) {\n                toast.update(id, \"Toast updated\", {\n                  type: \"success\",\n                });\n              }\n            }, 1000);\n          }}\n          style={styles.test}\n        >\n          Update a Toast\n        </Text>\n\n        <Text\n          onPress={() => {\n            toast.show(\"Global toast call\");\n          }}\n          style={[styles.test]}\n        >\n          Global toast call\n        </Text>\n\n        <Text\n          onPress={() => {\n            toast.show(\"Toast 1\");\n            toast.show(\"Toast 2\");\n          }}\n          style={[styles.test, { marginTop: 30 }]}\n        >\n          Two toast at same time\n        </Text>\n\n        <Text\n          onPress={() => {\n            toast.show(\"Press to close\", {\n              duration: 10000,\n              onPress: (id) => {\n                toast.hide(id);\n              },\n            });\n          }}\n          style={[styles.test]}\n        >\n          Toast onPress & close on press\n        </Text>\n        <Text\n          onPress={() => {\n            inputRef.current?.focus();\n            toast.show(\"Hi!\", { swipeEnabled: false });\n          }}\n          style={[styles.test, { marginBottom: 30 }]}\n        >\n          Swipe to close disabled\n        </Text>\n        <TextInput\n          ref={inputRef}\n          style={{ height: 50 }}\n          placeholder=\"Input\"\n        ></TextInput>\n\n        <Text\n          onPress={() => {\n            inputRef.current?.focus();\n            toast.show(\"Hi!\");\n          }}\n          style={[styles.test]}\n        >\n          Toast avoids keyboard\n        </Text>\n        <Text\n          onPress={() => {\n            inputRef.current?.focus();\n            toast.show(\"Logs to console on close\", {\n              onClose: () => console.log(\"Toast closed!\"),\n            });\n          }}\n          style={[styles.test]}\n        >\n          onClose event\n        </Text>\n        <Text\n          onPress={() => {\n            toast.hideAll();\n          }}\n          style={[styles.test]}\n        >\n          Hide all open toasts\n        </Text>\n      </View>\n    </ToastProvider>\n  );\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  test: {\n    fontSize: 16,\n    marginTop: 10,\n  },\n});\n\nexport default Home;\n"],"sourceRoot":""}